generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email         String  @unique
  recoveryEmail String? @unique @map("recovery_email")

  fullName    String  @map("full_name")
  username    String  @unique
  avatarPath  String? @map("avatar_path")
  password    String
  phoneNumber String? @map("phone_number")

  birthDate         DateTime @default(now()) @map("birth_date")
  libraryCardNumber String   @unique @map("library_card_number")

  studentInfo    StudentInfo?
  employmentInfo EmploymentInfo?

  roles UserRole[] @default([student])

  chatGroups ChatGroup[]
  messages   Message[]
  notes      Note[]

  @@map("user")
}

model StudentInfo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  creditCardNumber String? @unique @map("credit_card_number")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
  subgroupId String?   @map("subgroup_id")

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @map("group_id")

  studentExamsResults StudentExamResult[]

  @@map("student_info")
}

model Department {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String  @unique
  description String?
  isPublic    Boolean @default(true) @map("is_public")

  flows       Flow[]
  disciplines Discipline[]
  teachers    EmploymentInfo[]

  @@map("department")
}

model EmploymentInfo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  position String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?     @map("department_id")

  disciplines Discipline[]
  classes     Class[]
  finalTests  FinalTest[]

  @@map("employment_info")
}

model Semester {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  number   String  @default("Первый")
  isPublic Boolean @default(true) @map("is_public")

  flow   Flow?   @relation(fields: [flowId], references: [id])
  flowId String? @map("flow_id")

  finalTests FinalTest[]

  @@map("semester")
}

model StudentExamResult {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  result ExamResult @default(good)
  type   ExamType   @default(exam)

  isPublic Boolean @default(true) @map("is_public")

  student   StudentInfo @relation(fields: [studentId], references: [id])
  studentId String      @map("student_id")

  finalTest   FinalTest @relation(fields: [finalTestId], references: [id])
  finalTestId String    @map("final_test_id")

  @@map("student_exam_result")
}

model FinalTest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  date  DateTime?
  types ExamType[] @default([exam])

  isPublic Boolean @default(true) @map("is_public")

  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId String     @map("discipline_id")

  room   Room?   @relation(fields: [roomId], references: [id])
  roomId String? @map("room_id")

  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String   @map("semester_id")

  teacher   EmploymentInfo @relation(fields: [teacherId], references: [id])
  teacherId String         @map("teacher_info_id")

  studentExamsResults StudentExamResult[]

  @@map("final_test")
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  date     DateTime @default(now())
  dayWeek  DayWeek  @default(monday) @map("day_week")
  weekType WeekType @default(odd) @map("week_type")

  isPublic Boolean @default(true) @map("is_public")

  classes Class[]

  @@map("schedule")
}

model Class {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type         ClassType @default(lab)
  pairNumbers  Int[]     @default([1]) @map("pair_numbers")
  courseNumber Int?      @map("course_number")

  isPublic Boolean @default(true) @map("is_public")

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @map("room_id")

  schedule   Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId String?   @map("schedule_id")

  teacher   EmploymentInfo? @relation(fields: [teacherId], references: [id])
  teacherId String?         @map("teacher_id")

  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId String     @map("discipline_id")

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @map("group_id")

  subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
  subgroupId String?   @map("subgroup_id")

  flows       Flow[]
  attachments Attachment[]
  notes       Note[]

  @@map("class")
}

model Flow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  faculty String? @default("Информационные системы и технологии")

  isPublic Boolean @default(true) @map("is_public")

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @map("department_id")

  groups    Group[]
  classes   Class[]
  semesters Semester[]

  @@map("flow")
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studyStartDate DateTime  @default(now()) @map("study_start_date")
  studyEndDate   DateTime? @default(now()) @map("study_end_date")

  name         String @unique
  courseNumber Int    @default(2) @map("course_number")

  studyForm      StudyForm?      @default(full_time) @map("study_form")
  educationLevel EducationLevel? @default(bachelor) @map("education_level")

  specialty String? @default("Программная инженерия")
  profile   String? @default("Искусственный интеллект и предиктивная аналитика")

  isPublic Boolean @default(true) @map("is_public")

  flow   Flow?   @relation(fields: [flowId], references: [id])
  flowId String? @map("flow_id")

  subgroups Subgroup[]
  students  StudentInfo[]
  classes   Class[]

  @@map("group")
}

model Subgroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String

  isPublic Boolean @default(true) @map("is_public")

  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id])

  students StudentInfo[]
  classes  Class[]

  @@map("subgroup")
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  content   String
  isPrivate Boolean @default(true) @map("is_private")

  class   Class  @relation(fields: [classId], references: [id])
  classId String @map("class_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("note")
}

model Discipline {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique

  isPublic Boolean @default(true) @map("is_public")

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?     @map("department_id")

  teachers   EmploymentInfo[]
  finalTests FinalTest[]
  classes    Class[]

  @@map("discipline")
}

model Room {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  type    RoomType @default(cabinet)
  address String

  isPublic Boolean @default(true) @map("is_public")

  classes    Class[]
  finalTests FinalTest[]

  @@map("rooms")
}

model Attachment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  filename String
  url      String

  isPublic Boolean @default(true) @map("is_public")

  class   Class?  @relation(fields: [classId], references: [id])
  classId String? @map("class_id")

  message   Message? @relation(fields: [messageId], references: [id])
  messageId String?  @map("message_id")

  @@map("attachment")
}

model ChatGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String?

  members  User[]
  messages Message[]

  @@map("chat_group")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  status MessageStatus @default(sent)

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @map("sender_id")

  chatGroup   ChatGroup @relation(fields: [chatGroupId], references: [id])
  chatGroupId String    @map("chat_group_id")

  attachments Attachment[]

  @@map("message")
}

enum UserRole {
  student
  teacher
  course_creator
  assistant
  admin
}

enum StudyForm {
  full_time
  part_time
  extramural
  distance
  mixed
  externship
}

enum DayWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum WeekType {
  odd
  even
}

enum ClassType {
  lecture
  lab
  practice
  consultation
  exam
}

enum EducationLevel {
  bachelor
  master
  doctorate
  specialty
  vocational
  postgraduate
}

enum RoomType {
  auditorium
  cabinet
  conference_hall
  lab
  library
  computer_class
}

enum ExamType {
  exam
  credit
  differentiated_credit
  referat
  course_work
  calculation_graphic_work
}

enum ExamResult {
  excellent
  good
  satisfactory
  credited
  fail
  not_credited
  absense
  none
}

enum MessageStatus {
  sent
  delivered
  read
}
